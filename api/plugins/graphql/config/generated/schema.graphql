"""Site affiliate logos to display on home page"""
type Affiliate {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  logo: UploadFile
  order: Int!
}

"""Form categories to group similar forms together"""
type Category {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  order: Int!
  forms(sort: String, limit: Int, start: Int, where: JSON): [Form]
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

type Form {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  file: UploadFile
  category: Category
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Affiliate | Category | Form | Property | Status | Type | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

"""All listed properties"""
type Property {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  address: String!
  price: String
  description: String
  home_size: Float
  lot_size: Float
  bedrooms: String
  bathrooms: String
  garages: String
  year: DateTime
  hoa_fees: String
  rental: Boolean
  favorite: Boolean
  active: Boolean
  type: Type
  status: Status
  pictures(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type Query {
  affiliate(id: ID!): Affiliate
  affiliates(sort: String, limit: Int, start: Int, where: JSON): [Affiliate]
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  form(id: ID!): Form
  forms(sort: String, limit: Int, start: Int, where: JSON): [Form]
  property(id: ID!): Property
  properties(sort: String, limit: Int, start: Int, where: JSON): [Property]
  status(id: ID!): Status
  statuses(sort: String, limit: Int, start: Int, where: JSON): [Status]
  type(id: ID!): Type
  types(sort: String, limit: Int, start: Int, where: JSON): [Type]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

"""Status corresponding with the availability of a property"""
type Status {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  properties(sort: String, limit: Int, start: Int, where: JSON): [Property]
}

type Type {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  properties(sort: String, limit: Int, start: Int, where: JSON): [Property]
}

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  role: UsersPermissionsRole
}
